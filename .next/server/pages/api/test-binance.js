"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/test-binance";
exports.ids = ["pages/api/test-binance"];
exports.modules = {

/***/ "(api-node)/./crypto-trading-bot/src/bot/binanceInstance.ts":
/*!*******************************************************!*\
  !*** ./crypto-trading-bot/src/bot/binanceInstance.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   binanceExchangeInstance: () => (/* binding */ binanceExchangeInstance)\n/* harmony export */ });\n/* harmony import */ var _exchange_binance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exchange/binance */ \"(api-node)/./crypto-trading-bot/src/bot/exchange/binance.ts\");\n/* harmony import */ var _machine_learning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./machine-learning */ \"(api-node)/./crypto-trading-bot/src/bot/machine-learning/index.ts\");\n\n\n// Example: create a default user and ML adapter for demo\nconst defaultUser = {\n    id: 'demo',\n    name: 'Demo User',\n    apiKey: process.env.BINANCE_API_KEY || '',\n    apiSecret: process.env.BINANCE_API_SECRET || ''\n};\nconst mlAdapter = new _machine_learning__WEBPACK_IMPORTED_MODULE_1__.MachineLearningAdapter();\nconst binanceExchangeInstance = new _exchange_binance__WEBPACK_IMPORTED_MODULE_0__.BinanceExchange(defaultUser.apiKey, defaultUser.apiSecret, defaultUser, mlAdapter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2NyeXB0by10cmFkaW5nLWJvdC9zcmMvYm90L2JpbmFuY2VJbnN0YW5jZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDTztBQUc1RCx5REFBeUQ7QUFDekQsTUFBTUUsY0FBb0I7SUFDeEJDLElBQUk7SUFDSkMsTUFBTTtJQUNOQyxRQUFRQyxRQUFRQyxHQUFHLENBQUNDLGVBQWUsSUFBSTtJQUN2Q0MsV0FBV0gsUUFBUUMsR0FBRyxDQUFDRyxrQkFBa0IsSUFBSTtBQUMvQztBQUNBLE1BQU1DLFlBQVksSUFBSVYscUVBQXNCQTtBQUVyQyxNQUFNVywwQkFBMEIsSUFBSVosOERBQWVBLENBQ3hERSxZQUFZRyxNQUFNLEVBQ2xCSCxZQUFZTyxTQUFTLEVBQ3JCUCxhQUNBUyxXQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZGViYXlvL0Rlc2t0b3AvYm90X2JvdC9jcnlwdG8tdHJhZGluZy1ib3Qvc3JjL2JvdC9iaW5hbmNlSW5zdGFuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmluYW5jZUV4Y2hhbmdlIH0gZnJvbSAnLi9leGNoYW5nZS9iaW5hbmNlJztcbmltcG9ydCB7IE1hY2hpbmVMZWFybmluZ0FkYXB0ZXIgfSBmcm9tICcuL21hY2hpbmUtbGVhcm5pbmcnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlci9Vc2VyTWFuYWdlcic7XG5cbi8vIEV4YW1wbGU6IGNyZWF0ZSBhIGRlZmF1bHQgdXNlciBhbmQgTUwgYWRhcHRlciBmb3IgZGVtb1xuY29uc3QgZGVmYXVsdFVzZXI6IFVzZXIgPSB7XG4gIGlkOiAnZGVtbycsXG4gIG5hbWU6ICdEZW1vIFVzZXInLFxuICBhcGlLZXk6IHByb2Nlc3MuZW52LkJJTkFOQ0VfQVBJX0tFWSB8fCAnJyxcbiAgYXBpU2VjcmV0OiBwcm9jZXNzLmVudi5CSU5BTkNFX0FQSV9TRUNSRVQgfHwgJycsXG59O1xuY29uc3QgbWxBZGFwdGVyID0gbmV3IE1hY2hpbmVMZWFybmluZ0FkYXB0ZXIoKTtcblxuZXhwb3J0IGNvbnN0IGJpbmFuY2VFeGNoYW5nZUluc3RhbmNlID0gbmV3IEJpbmFuY2VFeGNoYW5nZShcbiAgZGVmYXVsdFVzZXIuYXBpS2V5LFxuICBkZWZhdWx0VXNlci5hcGlTZWNyZXQsXG4gIGRlZmF1bHRVc2VyLFxuICBtbEFkYXB0ZXJcbik7XG4iXSwibmFtZXMiOlsiQmluYW5jZUV4Y2hhbmdlIiwiTWFjaGluZUxlYXJuaW5nQWRhcHRlciIsImRlZmF1bHRVc2VyIiwiaWQiLCJuYW1lIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkJJTkFOQ0VfQVBJX0tFWSIsImFwaVNlY3JldCIsIkJJTkFOQ0VfQVBJX1NFQ1JFVCIsIm1sQWRhcHRlciIsImJpbmFuY2VFeGNoYW5nZUluc3RhbmNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./crypto-trading-bot/src/bot/binanceInstance.ts\n");

/***/ }),

/***/ "(api-node)/./crypto-trading-bot/src/bot/exchange/binance.ts":
/*!********************************************************!*\
  !*** ./crypto-trading-bot/src/bot/exchange/binance.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinanceExchange: () => (/* binding */ BinanceExchange)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(api-node)/./crypto-trading-bot/node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _notifications_telegram__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../notifications/telegram */ \"(api-node)/./crypto-trading-bot/src/bot/notifications/telegram.ts\");\n\n\nclass BinanceExchange {\n    constructor(apiKey, apiSecret, user, mlAdapter){\n        this.apiKey = '';\n        this.apiSecret = '';\n        this.baseUrl = 'https://api.binance.com/api/v3';\n        this.tradeLimit = 5; // Default max trades per session\n        this.tradesExecuted = 0;\n        this.minTradeSize = 0.001; // Example minimum trade size\n        this.recentTrades = [];\n        this.demoMode = false;\n        this.authenticate(apiKey, apiSecret);\n        if (user) this.user = user;\n        if (mlAdapter) this.mlAdapter = mlAdapter;\n    }\n    authenticate(apiKey, apiSecret) {\n        this.apiKey = apiKey || process.env.BINANCE_API_KEY || '';\n        this.apiSecret = apiSecret || process.env.BINANCE_API_SECRET || '';\n        this.demoMode = !this.apiKey || !this.apiSecret;\n    }\n    async sendRequest(endpoint, method = 'GET', data = null) {\n        if (this.demoMode) {\n            // Demo mode: return mock data for known endpoints\n            if (endpoint === '/exchangeInfo') {\n                return {\n                    symbols: [\n                        {\n                            symbol: 'BTCUSDT'\n                        },\n                        {\n                            symbol: 'ETHUSDT'\n                        }\n                    ]\n                };\n            }\n            if (endpoint === '/account') {\n                return {\n                    balances: [\n                        {\n                            asset: 'BTC',\n                            free: '1.0'\n                        },\n                        {\n                            asset: 'USDT',\n                            free: '10000.0'\n                        }\n                    ]\n                };\n            }\n            if (endpoint === '/order' || endpoint === '/order/oco') {\n                return {\n                    status: 'FILLED',\n                    orderId: Math.floor(Math.random() * 100000)\n                };\n            }\n            // Default mock response\n            return {\n                demo: true,\n                endpoint\n            };\n        }\n        const url = `${this.baseUrl}${endpoint}`;\n        const headers = {\n            'X-MBX-APIKEY': this.apiKey\n        };\n        const config = {\n            method: method,\n            url,\n            headers,\n            data\n        };\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0___default()(config);\n            return response.data;\n        } catch (error) {\n            if (error instanceof Error) {\n                throw new Error(`Binance API request failed: ${error.message}`);\n            } else {\n                throw new Error('Binance API request failed: Unknown error');\n            }\n        }\n    }\n    async getAllPairs() {\n        return await this.sendRequest('/exchangeInfo');\n    }\n    setTradeLimit(limit) {\n        this.tradeLimit = limit;\n    }\n    setMinTradeSize(size) {\n        this.minTradeSize = size;\n    }\n    setTelegramNotifier(botToken, chatId) {\n        this.telegramNotifier = new _notifications_telegram__WEBPACK_IMPORTED_MODULE_1__.TelegramNotifier(botToken, chatId);\n    }\n    getUserInfo() {\n        return this.user ? {\n            id: this.user.id,\n            name: this.user.name\n        } : null;\n    }\n    getMLInfo() {\n        if (!this.mlAdapter) return null;\n        // Example: Return last adaptation or prediction (expand as needed)\n        return {\n            lastAdaptation: this.lastAdaptation || null\n        };\n    }\n    getRecentTrades(limit = 10) {\n        return this.recentTrades.slice(-limit);\n    }\n    async placeOrder(symbol, side, quantity, price, stopLoss, takeProfit) {\n        // Parameter validation\n        if (!symbol || !side || !quantity || !price) {\n            throw new Error('Missing required parameters for placing order.');\n        }\n        if (quantity < this.minTradeSize) {\n            throw new Error(`Trade size must be at least ${this.minTradeSize}`);\n        }\n        if (quantity <= 0 || price <= 0) {\n            throw new Error('Quantity and price must be positive numbers.');\n        }\n        if (this.tradesExecuted >= this.tradeLimit) {\n            throw new Error('Trade limit reached for this session.');\n        }\n        // OCO order for stop-loss/take-profit\n        let result;\n        if (stopLoss && takeProfit) {\n            // Binance OCO endpoint is /api/v3/order/oco (not /api/v3)\n            const ocoEndpoint = 'https://api.binance.com/api/v3/order/oco';\n            const ocoOrderData = {\n                symbol,\n                side,\n                quantity,\n                price: takeProfit,\n                stopPrice: stopLoss,\n                stopLimitPrice: stopLoss,\n                stopLimitTimeInForce: 'GTC'\n            };\n            // OCO requires API key and signature (HMAC SHA256)\n            // For simplicity, assume the sendRequest method is extended to handle full URLs and signing if needed\n            this.tradesExecuted++;\n            result = await this.sendRequest('/order/oco', 'POST', ocoOrderData);\n        } else {\n            const orderData = {\n                symbol,\n                side,\n                type: 'LIMIT',\n                quantity,\n                price,\n                timeInForce: 'GTC'\n            };\n            this.tradesExecuted++;\n            result = await this.sendRequest('/order', 'POST', orderData);\n        }\n        // Record trade\n        this.recentTrades.push({\n            symbol,\n            side,\n            quantity,\n            price,\n            stopLoss,\n            takeProfit,\n            time: new Date(),\n            result\n        });\n        // Optionally record ML adaptation\n        if (this.mlAdapter) {\n            this.lastAdaptation = this.mlAdapter.adaptStrategy('default', this.recentTrades, {});\n        }\n        return result;\n    }\n    async getAccountInfo() {\n        return await this.sendRequest('/account');\n    }\n    async executeTradeFromSignal(symbol, signal, price, options) {\n        if (signal === 'HOLD') {\n            return {\n                status: 'No trade executed',\n                reason: 'Signal is HOLD'\n            };\n        }\n        const tradeSize = options?.tradeSize || this.minTradeSize;\n        const stopLoss = options?.stopLoss;\n        const takeProfit = options?.takeProfit;\n        if (this.tradesExecuted >= this.tradeLimit) {\n            return {\n                status: 'Trade limit reached',\n                reason: 'No trade executed'\n            };\n        }\n        const result = await this.placeOrder(symbol, signal, tradeSize, price, stopLoss, takeProfit);\n        // Send Telegram notification if configured\n        if (this.telegramNotifier) {\n            const msg = `Trade executed: ${signal} ${tradeSize} ${symbol} at ${price}`;\n            await this.telegramNotifier.sendTradeNotification(msg);\n        }\n        return result;\n    }\n    // Example: Adapt strategy before executing trade\n    adaptAndExecuteStrategy(strategyName, tradeHistory, marketData, ...args) {\n        if (this.mlAdapter) {\n            const updatedParams = this.mlAdapter.adaptStrategy(strategyName, tradeHistory, marketData);\n        // Use updatedParams to modify strategy or trade args\n        // ...\n        }\n    // Proceed to execute strategy/trade\n    }\n    // Dashboard integration points\n    // Example: Export trade execution events for dashboard monitoring\n    getTradeStats() {\n        return {\n            tradesExecuted: this.tradesExecuted,\n            tradeLimit: this.tradeLimit,\n            minTradeSize: this.minTradeSize\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./crypto-trading-bot/src/bot/exchange/binance.ts\n");

/***/ }),

/***/ "(api-node)/./crypto-trading-bot/src/bot/machine-learning/index.ts":
/*!**************************************************************!*\
  !*** ./crypto-trading-bot/src/bot/machine-learning/index.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MachineLearning: () => (/* binding */ MachineLearning),\n/* harmony export */   MachineLearningAdapter: () => (/* binding */ MachineLearningAdapter),\n/* harmony export */   SimpleRegressionModel: () => (/* binding */ SimpleRegressionModel),\n/* harmony export */   StrategyAdapter: () => (/* binding */ StrategyAdapter)\n/* harmony export */ });\nclass SimpleRegressionModel {\n    predict(features) {\n        if (this.weights.length !== features.length) return 0;\n        return features.reduce((sum, f, i)=>sum + f * this.weights[i], 0);\n    }\n    fit(features, targets) {\n        // Placeholder: set all weights to 1\n        this.weights = Array(features[0].length).fill(1);\n    }\n    constructor(){\n        this.weights = [];\n    }\n}\nclass StrategyAdapter {\n    constructor(model){\n        this.model = model || new SimpleRegressionModel();\n    }\n    adaptSignal(strategySignal, marketFeatures) {\n        const prediction = this.model.predict(marketFeatures);\n        if (prediction > 0.5) return 'BUY';\n        if (prediction < -0.5) return 'SELL';\n        return strategySignal;\n    }\n    train(features, targets) {\n        this.model.fit(features, targets);\n    }\n}\nclass MachineLearning {\n    constructor(){\n    // Initialize any necessary properties for machine learning\n    }\n    adaptStrategies(marketData) {\n    // Implement logic to adapt trading strategies based on live market conditions\n    // This could involve training models or adjusting parameters based on market trends\n    }\n    predictMarketMovement(data) {\n        // Implement a method to predict market movement based on historical data\n        // Return a prediction value (e.g., price movement direction)\n        return 0; // Placeholder return value\n    }\n    evaluateStrategyPerformance(strategyData) {\n    // Implement logic to evaluate the performance of trading strategies\n    // This could involve backtesting or analyzing past trades\n    }\n}\nclass MachineLearningAdapter {\n    constructor(){\n    // Initialize ML model, load weights, etc.\n    }\n    // Example: Update strategy parameters based on recent trades and market data\n    adaptStrategy(strategyName, tradeHistory, marketData) {\n        // Placeholder: Implement ML logic here (e.g., reinforcement learning, online learning)\n        // Return updated strategy parameters\n        return {};\n    }\n    // Example: Predict next action or signal\n    predictSignal(strategyName, marketData) {\n        // Placeholder: Implement prediction logic\n        return 'HOLD';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2NyeXB0by10cmFkaW5nLWJvdC9zcmMvYm90L21hY2hpbmUtbGVhcm5pbmcvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtPLE1BQU1BO0lBR1RDLFFBQVFDLFFBQWtCLEVBQVU7UUFDaEMsSUFBSSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxLQUFLRixTQUFTRSxNQUFNLEVBQUUsT0FBTztRQUNwRCxPQUFPRixTQUFTRyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsR0FBR0MsSUFBTUYsTUFBTUMsSUFBSSxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssRUFBRSxFQUFFO0lBQ3JFO0lBRUFDLElBQUlQLFFBQW9CLEVBQUVRLE9BQWlCLEVBQVE7UUFDL0Msb0NBQW9DO1FBQ3BDLElBQUksQ0FBQ1AsT0FBTyxHQUFHUSxNQUFNVCxRQUFRLENBQUMsRUFBRSxDQUFDRSxNQUFNLEVBQUVRLElBQUksQ0FBQztJQUNsRDs7YUFWUVQsVUFBb0IsRUFBRTs7QUFXbEM7QUFFTyxNQUFNVTtJQUdULFlBQVlDLEtBQWUsQ0FBRTtRQUN6QixJQUFJLENBQUNBLEtBQUssR0FBR0EsU0FBUyxJQUFJZDtJQUM5QjtJQUVPZSxZQUFZQyxjQUF1QyxFQUFFQyxjQUF3QixFQUEyQjtRQUMzRyxNQUFNQyxhQUFhLElBQUksQ0FBQ0osS0FBSyxDQUFDYixPQUFPLENBQUNnQjtRQUN0QyxJQUFJQyxhQUFhLEtBQUssT0FBTztRQUM3QixJQUFJQSxhQUFhLENBQUMsS0FBSyxPQUFPO1FBQzlCLE9BQU9GO0lBQ1g7SUFFT0csTUFBTWpCLFFBQW9CLEVBQUVRLE9BQWlCLEVBQVE7UUFDeEQsSUFBSSxDQUFDSSxLQUFLLENBQUNMLEdBQUcsQ0FBQ1AsVUFBVVE7SUFDN0I7QUFDSjtBQUVPLE1BQU1VO0lBQ1QsYUFBYztJQUNWLDJEQUEyRDtJQUMvRDtJQUVBQyxnQkFBZ0JDLFVBQWUsRUFBUTtJQUNuQyw4RUFBOEU7SUFDOUUsb0ZBQW9GO0lBQ3hGO0lBRUFDLHNCQUFzQkMsSUFBUyxFQUFVO1FBQ3JDLHlFQUF5RTtRQUN6RSw2REFBNkQ7UUFDN0QsT0FBTyxHQUFHLDJCQUEyQjtJQUN6QztJQUVBQyw0QkFBNEJDLFlBQWlCLEVBQVE7SUFDakQsb0VBQW9FO0lBQ3BFLDBEQUEwRDtJQUM5RDtBQUNKO0FBRU8sTUFBTUM7SUFDVCxhQUFjO0lBQ1YsMENBQTBDO0lBQzlDO0lBRUEsNkVBQTZFO0lBQzdFQyxjQUFjQyxZQUFvQixFQUFFQyxZQUFtQixFQUFFUixVQUFlLEVBQU87UUFDM0UsdUZBQXVGO1FBQ3ZGLHFDQUFxQztRQUNyQyxPQUFPLENBQUM7SUFDWjtJQUVBLHlDQUF5QztJQUN6Q1MsY0FBY0YsWUFBb0IsRUFBRVAsVUFBZSxFQUEyQjtRQUMxRSwwQ0FBMEM7UUFDMUMsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIi9ob21lL2FkZWJheW8vRGVza3RvcC9ib3RfYm90L2NyeXB0by10cmFkaW5nLWJvdC9zcmMvYm90L21hY2hpbmUtbGVhcm5pbmcvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBNTE1vZGVsIHtcbiAgICBwcmVkaWN0KGZlYXR1cmVzOiBudW1iZXJbXSk6IG51bWJlcjtcbiAgICBmaXQoZmVhdHVyZXM6IG51bWJlcltdW10sIHRhcmdldHM6IG51bWJlcltdKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFNpbXBsZVJlZ3Jlc3Npb25Nb2RlbCBpbXBsZW1lbnRzIE1MTW9kZWwge1xuICAgIHByaXZhdGUgd2VpZ2h0czogbnVtYmVyW10gPSBbXTtcblxuICAgIHByZWRpY3QoZmVhdHVyZXM6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMud2VpZ2h0cy5sZW5ndGggIT09IGZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcy5yZWR1Y2UoKHN1bSwgZiwgaSkgPT4gc3VtICsgZiAqIHRoaXMud2VpZ2h0c1tpXSwgMCk7XG4gICAgfVxuXG4gICAgZml0KGZlYXR1cmVzOiBudW1iZXJbXVtdLCB0YXJnZXRzOiBudW1iZXJbXSk6IHZvaWQge1xuICAgICAgICAvLyBQbGFjZWhvbGRlcjogc2V0IGFsbCB3ZWlnaHRzIHRvIDFcbiAgICAgICAgdGhpcy53ZWlnaHRzID0gQXJyYXkoZmVhdHVyZXNbMF0ubGVuZ3RoKS5maWxsKDEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5QWRhcHRlciB7XG4gICAgcHJpdmF0ZSBtb2RlbDogTUxNb2RlbDtcblxuICAgIGNvbnN0cnVjdG9yKG1vZGVsPzogTUxNb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWwgfHwgbmV3IFNpbXBsZVJlZ3Jlc3Npb25Nb2RlbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGFwdFNpZ25hbChzdHJhdGVneVNpZ25hbDogJ0JVWScgfCAnU0VMTCcgfCAnSE9MRCcsIG1hcmtldEZlYXR1cmVzOiBudW1iZXJbXSk6ICdCVVknIHwgJ1NFTEwnIHwgJ0hPTEQnIHtcbiAgICAgICAgY29uc3QgcHJlZGljdGlvbiA9IHRoaXMubW9kZWwucHJlZGljdChtYXJrZXRGZWF0dXJlcyk7XG4gICAgICAgIGlmIChwcmVkaWN0aW9uID4gMC41KSByZXR1cm4gJ0JVWSc7XG4gICAgICAgIGlmIChwcmVkaWN0aW9uIDwgLTAuNSkgcmV0dXJuICdTRUxMJztcbiAgICAgICAgcmV0dXJuIHN0cmF0ZWd5U2lnbmFsO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFpbihmZWF0dXJlczogbnVtYmVyW11bXSwgdGFyZ2V0czogbnVtYmVyW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tb2RlbC5maXQoZmVhdHVyZXMsIHRhcmdldHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hY2hpbmVMZWFybmluZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgYW55IG5lY2Vzc2FyeSBwcm9wZXJ0aWVzIGZvciBtYWNoaW5lIGxlYXJuaW5nXG4gICAgfVxuXG4gICAgYWRhcHRTdHJhdGVnaWVzKG1hcmtldERhdGE6IGFueSk6IHZvaWQge1xuICAgICAgICAvLyBJbXBsZW1lbnQgbG9naWMgdG8gYWRhcHQgdHJhZGluZyBzdHJhdGVnaWVzIGJhc2VkIG9uIGxpdmUgbWFya2V0IGNvbmRpdGlvbnNcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBpbnZvbHZlIHRyYWluaW5nIG1vZGVscyBvciBhZGp1c3RpbmcgcGFyYW1ldGVycyBiYXNlZCBvbiBtYXJrZXQgdHJlbmRzXG4gICAgfVxuXG4gICAgcHJlZGljdE1hcmtldE1vdmVtZW50KGRhdGE6IGFueSk6IG51bWJlciB7XG4gICAgICAgIC8vIEltcGxlbWVudCBhIG1ldGhvZCB0byBwcmVkaWN0IG1hcmtldCBtb3ZlbWVudCBiYXNlZCBvbiBoaXN0b3JpY2FsIGRhdGFcbiAgICAgICAgLy8gUmV0dXJuIGEgcHJlZGljdGlvbiB2YWx1ZSAoZS5nLiwgcHJpY2UgbW92ZW1lbnQgZGlyZWN0aW9uKVxuICAgICAgICByZXR1cm4gMDsgLy8gUGxhY2Vob2xkZXIgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgZXZhbHVhdGVTdHJhdGVneVBlcmZvcm1hbmNlKHN0cmF0ZWd5RGF0YTogYW55KTogdm9pZCB7XG4gICAgICAgIC8vIEltcGxlbWVudCBsb2dpYyB0byBldmFsdWF0ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdHJhZGluZyBzdHJhdGVnaWVzXG4gICAgICAgIC8vIFRoaXMgY291bGQgaW52b2x2ZSBiYWNrdGVzdGluZyBvciBhbmFseXppbmcgcGFzdCB0cmFkZXNcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNYWNoaW5lTGVhcm5pbmdBZGFwdGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBNTCBtb2RlbCwgbG9hZCB3ZWlnaHRzLCBldGMuXG4gICAgfVxuXG4gICAgLy8gRXhhbXBsZTogVXBkYXRlIHN0cmF0ZWd5IHBhcmFtZXRlcnMgYmFzZWQgb24gcmVjZW50IHRyYWRlcyBhbmQgbWFya2V0IGRhdGFcbiAgICBhZGFwdFN0cmF0ZWd5KHN0cmF0ZWd5TmFtZTogc3RyaW5nLCB0cmFkZUhpc3Rvcnk6IGFueVtdLCBtYXJrZXREYXRhOiBhbnkpOiBhbnkge1xuICAgICAgICAvLyBQbGFjZWhvbGRlcjogSW1wbGVtZW50IE1MIGxvZ2ljIGhlcmUgKGUuZy4sIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcsIG9ubGluZSBsZWFybmluZylcbiAgICAgICAgLy8gUmV0dXJuIHVwZGF0ZWQgc3RyYXRlZ3kgcGFyYW1ldGVyc1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLy8gRXhhbXBsZTogUHJlZGljdCBuZXh0IGFjdGlvbiBvciBzaWduYWxcbiAgICBwcmVkaWN0U2lnbmFsKHN0cmF0ZWd5TmFtZTogc3RyaW5nLCBtYXJrZXREYXRhOiBhbnkpOiAnQlVZJyB8ICdTRUxMJyB8ICdIT0xEJyB7XG4gICAgICAgIC8vIFBsYWNlaG9sZGVyOiBJbXBsZW1lbnQgcHJlZGljdGlvbiBsb2dpY1xuICAgICAgICByZXR1cm4gJ0hPTEQnO1xuICAgIH1cbn0iXSwibmFtZXMiOlsiU2ltcGxlUmVncmVzc2lvbk1vZGVsIiwicHJlZGljdCIsImZlYXR1cmVzIiwid2VpZ2h0cyIsImxlbmd0aCIsInJlZHVjZSIsInN1bSIsImYiLCJpIiwiZml0IiwidGFyZ2V0cyIsIkFycmF5IiwiZmlsbCIsIlN0cmF0ZWd5QWRhcHRlciIsIm1vZGVsIiwiYWRhcHRTaWduYWwiLCJzdHJhdGVneVNpZ25hbCIsIm1hcmtldEZlYXR1cmVzIiwicHJlZGljdGlvbiIsInRyYWluIiwiTWFjaGluZUxlYXJuaW5nIiwiYWRhcHRTdHJhdGVnaWVzIiwibWFya2V0RGF0YSIsInByZWRpY3RNYXJrZXRNb3ZlbWVudCIsImRhdGEiLCJldmFsdWF0ZVN0cmF0ZWd5UGVyZm9ybWFuY2UiLCJzdHJhdGVneURhdGEiLCJNYWNoaW5lTGVhcm5pbmdBZGFwdGVyIiwiYWRhcHRTdHJhdGVneSIsInN0cmF0ZWd5TmFtZSIsInRyYWRlSGlzdG9yeSIsInByZWRpY3RTaWduYWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./crypto-trading-bot/src/bot/machine-learning/index.ts\n");

/***/ }),

/***/ "(api-node)/./crypto-trading-bot/src/bot/notifications/telegram.ts":
/*!**************************************************************!*\
  !*** ./crypto-trading-bot/src/bot/notifications/telegram.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TelegramNotifier: () => (/* binding */ TelegramNotifier)\n/* harmony export */ });\nclass TelegramNotifier {\n    constructor(botToken, chatId){\n        this.botToken = botToken;\n        this.chatId = chatId;\n    }\n    async sendTradeNotification(message) {\n        const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;\n        const payload = {\n            chat_id: this.chatId,\n            text: message\n        };\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                throw new Error(`Error sending message: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Failed to send Telegram notification:', error);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2NyeXB0by10cmFkaW5nLWJvdC9zcmMvYm90L25vdGlmaWNhdGlvbnMvdGVsZWdyYW0udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBSVQsWUFBWUMsUUFBZ0IsRUFBRUMsTUFBYyxDQUFFO1FBQzFDLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDbEI7SUFFQSxNQUFhQyxzQkFBc0JDLE9BQWUsRUFBaUI7UUFDL0QsTUFBTUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQ0osUUFBUSxDQUFDLFlBQVksQ0FBQztRQUN0RSxNQUFNSyxVQUFVO1lBQ1pDLFNBQVMsSUFBSSxDQUFDTCxNQUFNO1lBQ3BCTSxNQUFNSjtRQUNWO1FBRUEsSUFBSTtZQUNBLE1BQU1LLFdBQVcsTUFBTUMsTUFBTUwsS0FBSztnQkFDOUJNLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ0wsZ0JBQWdCO2dCQUNwQjtnQkFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVDtZQUN6QjtZQUVBLElBQUksQ0FBQ0csU0FBU08sRUFBRSxFQUFFO2dCQUNkLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFUixTQUFTUyxVQUFVLEVBQUU7WUFDbkU7UUFDSixFQUFFLE9BQU9DLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLHlDQUF5Q0E7UUFDM0Q7SUFDSjtBQUNKIiwic291cmNlcyI6WyIvaG9tZS9hZGViYXlvL0Rlc2t0b3AvYm90X2JvdC9jcnlwdG8tdHJhZGluZy1ib3Qvc3JjL2JvdC9ub3RpZmljYXRpb25zL3RlbGVncmFtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUZWxlZ3JhbU5vdGlmaWVyIHtcbiAgICBwcml2YXRlIGJvdFRva2VuOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjaGF0SWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGJvdFRva2VuOiBzdHJpbmcsIGNoYXRJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYm90VG9rZW4gPSBib3RUb2tlbjtcbiAgICAgICAgdGhpcy5jaGF0SWQgPSBjaGF0SWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHNlbmRUcmFkZU5vdGlmaWNhdGlvbihtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3Qke3RoaXMuYm90VG9rZW59L3NlbmRNZXNzYWdlYDtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIGNoYXRfaWQ6IHRoaXMuY2hhdElkLFxuICAgICAgICAgICAgdGV4dDogbWVzc2FnZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBzZW5kaW5nIG1lc3NhZ2U6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIFRlbGVncmFtIG5vdGlmaWNhdGlvbjonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59Il0sIm5hbWVzIjpbIlRlbGVncmFtTm90aWZpZXIiLCJib3RUb2tlbiIsImNoYXRJZCIsInNlbmRUcmFkZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJ1cmwiLCJwYXlsb2FkIiwiY2hhdF9pZCIsInRleHQiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJlcnJvciIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./crypto-trading-bot/src/bot/notifications/telegram.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest-binance&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftest-binance.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest-binance&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftest-binance.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_test_binance_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/api/test-binance.ts */ \"(api-node)/./pages/api/test-binance.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_test_binance_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_test_binance_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/test-binance\",\n        pathname: \"/api/test-binance\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_test_binance_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/test-binance\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/test-binance\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest-binance&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftest-binance.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/test-binance.ts":
/*!***********************************!*\
  !*** ./pages/api/test-binance.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _crypto_trading_bot_src_bot_binanceInstance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../crypto-trading-bot/src/bot/binanceInstance */ \"(api-node)/./crypto-trading-bot/src/bot/binanceInstance.ts\");\n\nasync function handler(req, res) {\n    try {\n        // Use getAccountInfo to fetch Binance account details\n        const accountInfo = await _crypto_trading_bot_src_bot_binanceInstance__WEBPACK_IMPORTED_MODULE_0__.binanceExchangeInstance.getAccountInfo();\n        res.status(200).json({\n            success: true,\n            accountInfo\n        });\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: error.message || error.toString()\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS90ZXN0LWJpbmFuY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDMkY7QUFFNUUsZUFBZUMsUUFBUUMsR0FBbUIsRUFBRUMsR0FBb0I7SUFDN0UsSUFBSTtRQUNGLHNEQUFzRDtRQUN0RCxNQUFNQyxjQUFjLE1BQU0saUdBQWlDQyxjQUFjO1FBQ3pFRixJQUFJRyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7WUFBTUo7UUFBWTtJQUNwRCxFQUFFLE9BQU9LLE9BQVk7UUFDbkJOLElBQUlHLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsU0FBUztZQUFPQyxPQUFPQSxNQUFNQyxPQUFPLElBQUlELE1BQU1FLFFBQVE7UUFBRztJQUNsRjtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9hZGViYXlvL0Rlc2t0b3AvYm90X2JvdC9wYWdlcy9hcGkvdGVzdC1iaW5hbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgYmluYW5jZUV4Y2hhbmdlSW5zdGFuY2UgfSBmcm9tICcuLi8uLi9jcnlwdG8tdHJhZGluZy1ib3Qvc3JjL2JvdC9iaW5hbmNlSW5zdGFuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGdldEFjY291bnRJbmZvIHRvIGZldGNoIEJpbmFuY2UgYWNjb3VudCBkZXRhaWxzXG4gICAgY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCAoYmluYW5jZUV4Y2hhbmdlSW5zdGFuY2UgYXMgYW55KS5nZXRBY2NvdW50SW5mbygpO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VjY2VzczogdHJ1ZSwgYWNjb3VudEluZm8gfSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCBlcnJvci50b1N0cmluZygpIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiYmluYW5jZUV4Y2hhbmdlSW5zdGFuY2UiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiYWNjb3VudEluZm8iLCJnZXRBY2NvdW50SW5mbyIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwiZXJyb3IiLCJtZXNzYWdlIiwidG9TdHJpbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/test-binance.ts\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/debug","vendor-chunks/follow-redirects","vendor-chunks/supports-color","vendor-chunks/ms","vendor-chunks/has-flag"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest-binance&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ftest-binance.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();